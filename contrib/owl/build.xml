<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<project name="Owl" default="war" xmlns:ivy="antlib:org.apache.ivy.ant">

    <!-- owl-build specific settings -->
    <property name="all.warnings" value="1" />

    <!-- Setting pig.root ensures we're in a mode for building inside pig's contrib dir -->
    <property name="pig.root" value="${basedir}/../.." />

    <!-- Determine if we're building inside pig's contrib or as a standalone build-->
    <condition property="inside.pig">
        <and>
            <isset property="pig.root" />
            <available file="${pig.root}" type="dir" />
        </and>
    </condition>

    <!-- Load all the default properties, and any the user wants    -->
    <!-- to contribute (without having to type -D or edit this file -->
    <property file="${user.home}/build.properties" />
    <property file="${basedir}/build.properties" />

    <!-- import file="build-contrib.xml"/ -->

    <!-- name and version properties -->
    <property name="name" value="owl" />
    <property name="Name" value="Owl" />
    <property name="version" value="0.8.0-dev" />
    <property name="final.name" value="${name}-${version}" />
    <condition property="isWindows">
        <os family="windows"/>
    </condition>

    <!-- default clover.home value, should be overriden on command line -->
    <property name="clover.home" value="${basedir}/java/" />

    <!-- source properties -->
    <property name="lib.dir" value="${basedir}/java/lib/" />
    <property name="owldb.dir" value="${basedir}/setup/" />
    <property name="src.dir" value="${basedir}/java/main/" />
    <property name="src.docs.dir" value="${basedir}/docs/" />
    <property name="docs.dir" value="${basedir}/java/main/docs/" />
    <property name="ci.dir" value="${basedir}/ci/" />
    <property name="parser.dir" value="${src.dir}/org/apache/hadoop/owl/parser/" />
    <property name="orm.dir" value="${src.dir}/org/apache/hadoop/owl/orm/" />
    <property name="schema.dir" value="${src.dir}/org/apache/hadoop/owl/schema/" />

    <!-- build properties -->
    <property name="build.dir" value="${basedir}/build" />
    <property name="build.classes" value="${build.dir}/classes" />
    <property name="build.docs" value="${build.dir}/docs" />
    <property name="build.javadoc" value="${build.docs}/api" />
    <property name="dist.dir" value="${build.dir}/${final.name}" />
    <property name="build.encoding" value="ISO-8859-1" />

    <!-- environment properties -->
    <property environment="env"/>

    <!-- javac properties -->
    <property name="javac.debug" value="on" />
    <property name="javac.optimize" value="on" />
    <property name="javac.deprecation" value="on" />
    <property name="javac.version" value="1.5" />
    <property name="javac.args" value="" />
    <!-- default warnings option -->
    <property name="javac.args.warnings" value="-Xmaxwarns 1000000" />
    <!-- warnings option if all.warnings property is set on cmdline -->
    <property name="javac.args.all.warnings" value="-Xmaxwarns 1000000 -Xlint" />

    <!-- jar names. TODO we might want to use the svn reversion name in the name in case it is a dev version -->
    <property name="output.warfile" value="${build.dir}/${final.name}.war" />
    <property name="output.jarfile" value="${build.dir}/${final.name}.jar" />
    <property name="output.jarfile.core" value="${build.dir}/${final.name}-core.jar" />
    <property name="output.jarfile.driver" value="${build.dir}/${final.name}-driver.jar" />
    <property name="output.jarfile.sources" value="${build.dir}/${final.name}-sources.jar" />

    <!-- Test classes -->
    <property name="output.jarfile.test" value="${build.dir}/${final.name}-test.jar" />

    <!-- test properties -->
    <property name="test.src.dir" value="${basedir}/java/test" />
    <property name="test.build.dir" value="${build.dir}/test" />
    <property name="test.build.classes" value="${test.build.dir}/classes" />
    <property name="test.log.dir" value="${test.build.dir}/logs" />
    <property name="test.timeout" value="900000" />
    <property name="test.junit.output.format" value="plain" />

    <!-- test configuration, use ${user.home}/build.properties to configure values  -->
    <property name="test.log.dir" value="${test.build.dir}/logs"/>
    <property name="test.output" value="no"/>
    <property name="test.xmlconfig" value="${ci.dir}/owlTestConfig.xml"/>
    <property name="test.serverport" value="8078"/>
    <property name="test.uri" value="http://localhost:${test.serverport}/owl/rest"/>
    <property name="db.type" value="derby" />
    <property name="use.jetty" value="1" />

     <condition property="jetty.disabled">
         <equals arg1="${use.jetty}" arg2="0" />
     </condition>
     <condition property="derby.enabled">
         <equals arg1="${db.type}" arg2="derby" />
     </condition>

    <!-- rats properties -->
    <property name="rats_url" value="http://arat.googlecode.com/files/rat-lib-all-0.5.1.jar" />
    <property name="rat.reporting.classname" value="rat.Report"/>

    <!-- javadoc properties  -->
    <property name="javadoc.link.java" value="http://java.sun.com/j2se/1.6.0/docs/api/" />

    <!-- jetty home -->
    <property name="jetty.home" value="${basedir}/ci/jetty-6.1.18" />

    <!-- IVY properteis set here -->
    <property name="ivy.dir" location="ivy"/>
    <loadproperties srcfile="${ivy.dir}/libraries.properties"/>
    <property name="ivy.jar" location="${ivy.dir}/ivy-${ivy.version}.jar"/>
    <property name="ivy_repo_url"
              value="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.version}/ivy-${ivy.version}.jar"/>
    <property name="ivysettings.xml" location="${ivy.dir}/ivysettings.xml"/>
    <property name="ivy.org" value="org.apache.hadoop"/>
    <property name="build.dir" location="build"/>
    <property name="dist.dir" value="${build.dir}/${final.name}"/>
    <property name="build.ivy.dir" location="${build.dir}/ivy"/>
    <property name="build.ivy.lib.dir" location="${build.ivy.dir}/lib"/>
    <property name="ivy.lib.dir" location="${build.ivy.lib.dir}/${ant.project.name}"/>
    <property name="build.ivy.report.dir" location="${build.ivy.dir}/report"/>
    <property name="build.ivy.maven.dir" location="${build.ivy.dir}/maven"/>
    <property name="build.ivy.maven.pom" location="${build.ivy.maven.dir}/owl-${version}.pom"/>
    <property name="build.ivy.maven.jar" location="${build.ivy.maven.dir}/owl-${version}.jar"/>
    <property name="javacc.home" location="${ivy.lib.dir}"/>

    <!--this is the naming policy for artifacts we want pulled down-->
    <property name="ivy.artifact.retrieve.pattern" value="${ant.project.name}/[artifact]-[revision].[ext]"/>

    <!--this is how artifacts that get built are named-->
    <property name="ivy.publish.pattern" value="owl-[revision].[ext]"/>
    <property name="owl.jar" value="${output.jarfile.core}"/>
    <!--JavaCC home -->
    <property name="JAVACC_HOME" value="${ivy.lib.dir}"/>


    <!-- Static jarfiles present in java/lib if we're building from a standalone env, this goes away if we're building from within pig -->
    <property name="pig.static.jarfile" value="pig-0.7.0-dev-core.jar" />
    <property name="hadoop.static.jarfile" value="hadoop-0.20.1.3195383004-core.jar" />

    <!--clover properties -->
    <property name="clover.db.dir" location="${build.dir}/test/clover/db"/>
    <property name="clover.report.dir" location="${build.dir}/test/clover/reports"/>
    <property name="clover.jar" location="${clover.home}/lib/clover.jar"/>
    <available property="clover.present" file="${clover.jar}" />

    <!-- check if clover reports should be generated -->
    <condition property="clover.enabled">
      <and>
        <isset property="run.clover"/>
        <isset property="clover.present"/>
      </and>
    </condition>

    <path id="datanucleus.jars">
        <fileset file="${ivy.lib.dir}/datanucleus-*.jar" excludes="datanucleus-enhancer-*.jar"/>
        <fileset file="${ivy.lib.dir}/persistence-api-*.jar"/>
        <fileset file="${ivy.lib.dir}/jdo2-api-*.jar"/>
        <fileset file="${ivy.lib.dir}/asm-*.jar"/>
    </path>

    <!-- The jars needed by the client, entries added here need to be added to buildJars task also -->
    <path id="client.jars">
        <fileset file="${ivy.lib.dir}/jersey-bundle-*.jar"/>
        <fileset file="${lib.dir}/log4j-*.jar"/>
        <fileset file="${ivy.lib.dir}/json-lib-*.jar"/>
        <fileset file="${ivy.lib.dir}/commons-configuration-*.jar"/>
        <fileset file="${ivy.lib.dir}/commons-beanutils-*.jar"/>
        <fileset file="${ivy.lib.dir}/commons-beanutils-bean-collections-*.jar"/>
        <fileset file="${ivy.lib.dir}/commons-beanutils-core-*.jar"/>
        <fileset file="${ivy.lib.dir}/commons-collections-*.jar"/>
        <fileset file="${ivy.lib.dir}/commons-lang-*.jar"/>
        <fileset file="${ivy.lib.dir}/commons-logging-*.jar"/>
        <fileset file="${ivy.lib.dir}/commons-cli-*.jar"/>
        <fileset file="${ivy.lib.dir}/ezmorph-*.jar"/>
        <fileset file="${ivy.lib.dir}/jsr311-api-*.jar"/>
        <!-- fileset file="${zebra.jar.dir}/${zebra.jarfile}"/ -->
    </path>

    <!-- The classpath while running backend tests-->
    <path id="backend.test.classpath">
        <fileset file="${ivy.lib.dir}/*.jar"/>
        <fileset file="${lib.dir}/*.jar" />
        <fileset file="${clover.jar}" />
        <pathelement location="${build.classes}"/>
        <pathelement location="${test.build.classes}"/>
    </path>   

    <!-- The classpath while compiling-->
    <path id="classpath">
        <path refid="client.jars"/>
        <fileset file="${ivy.lib.dir}/junit-*.jar"/>
        <fileset file="${ivy.lib.dir}/mockito-all-*.jar"/>
        <fileset file="${clover.jar}" />
        <path refid="datanucleus.jars"/>
        <pathelement location="${build.classes}"/>
    </path>

    <!-- The classpath while running client tests-->
    <path id="client.test.classpath">
        <fileset file="${output.jarfile}"/>
        <fileset file="${ivy.lib.dir}/junit-*.jar"/>
        <fileset file="${ivy.lib.dir}/mockito-all-*.jar"/>
        <fileset file="${ivy.lib.dir}/commons-httpclient-*.jar"/>
        <fileset file="${clover.jar}"/>
        <pathelement location="${test.build.classes}"/>
    </path>

    <target name="set-build-vars-inside-pig" description="set variables appropriate to when we're built inside pig" if="inside.pig">
        <echo>Building from inside pig contrib</echo>
        <property name="pig.jar.dir" value="${pig.root}/build" />
        <property name="hadoop.jar.dir" value="${pig.root}/lib" />
        <property name="pig.jarfile" value="pig-${version}-core.jar" />
        <property name="hadoop.jarfile" value="hadoop20.jar" />
    </target>

    <target name="set-build-vars-standalone" description="set variables appropriate to when we're built as a standalone build" unless="inside.pig">
        <echo>Using standalone build mode, assuming we're not building from inside pig</echo>
        <property name="pig.jar.dir" value="${lib.dir}" />
        <property name="hadoop.jar.dir" value="${lib.dir}" />
        <property name="pig.jarfile" value="${pig.static.jarfile}" />
        <property name="hadoop.jarfile" value="${hadoop.static.jarfile}" />
    </target>

    <target name="determine-build-vars" description="set variables that depend on whether we're built independantly or inside pig's build" depends="set-build-vars-inside-pig,set-build-vars-standalone">
        <echo>using Hadoop jar : ${hadoop.jar.dir}/${hadoop.jarfile}</echo>
        <echo>using Pig jar : ${pig.jar.dir}/${pig.jarfile}</echo>
    </target>

    <target name="init" depends="determine-build-vars,ivy-compile,ivy-test">
        <mkdir dir="${dist.dir}" />
        <mkdir dir="${build.classes}" />
        <mkdir dir="${test.build.classes}" />
        <copy file="${owldb.dir}/${db.type}/orm.xml" tofile="${orm.dir}/orm.xml"/>
        <tstamp>
            <format property="timestamp" pattern="MMM dd yyyy, HH:mm:ss" />
        </tstamp>
        <svnversion outputproperty="svn.revision"/>
    </target>

    <macrodef name="svnversion">
        <!-- the path needs to be small content otherwise it will take AGES ! -->
        <attribute name="wcpath" default="${basedir}" />
        <attribute name="outputproperty" />
        <sequential>
            <exec executable="svnversion" outputproperty="@{outputproperty}" failonerror="false" failifexecutionfails="false" >
                <arg value="@{wcpath}" />
                <redirector>
                    <outputfilterchain>
                        <tokenfilter>
                            <!-- version can be xxxx, xxxx:yyyy, xxxxM, xxxxS or xxxx:yyyyMS , ... just get the working copy one -->
                            <replaceregex pattern="((\d+).*)" replace="\2" />
                        </tokenfilter>
                    </outputfilterchain>
                </redirector>
            </exec>
        </sequential>
    </macrodef>

    <target name="owlclean" depends="jetty-stop, derby-cleanup, clean" description="Clean derby db, stop jetty process and cleanup build artifacts" />

    <!-- ================================================================== -->
    <!-- Clean.  Delete the build files, and their directories              -->
    <!-- ================================================================== -->
    <target name="clean" description="Cleanup build artifacts">
        <delete dir="${docs.dir}/build" />
        <delete dir="${build.dir}" />
        <delete file="${ivy.dir}/ivy*.jar" />
        <delete file="${basedir}/${final.name}.jar" />
        <delete file="${basedir}/datanucleus.log" />
        <delete file="${basedir}/owlTestLogs.log" />
        <delete file="${basedir}/owlServerLogs.log" />
        <delete file="${basedir}/ci/owljetty.log" />
        <delete file="${orm.dir}/orm.xml" />
        <delete> 
          <fileset dir="${parser.dir}" includes="*.java"/>
          <fileset dir="${schema.dir}" includes="*.java" excludes="ColumnType.java, Schema.java" />
        </delete>
    </target>

    <!-- ================================================================== -->
    <!-- Build sources                                                      -->
    <!-- ================================================================== -->

    <target name="warn-about-warnings" unless="all.warnings">
        <echo>*** To compile with all warnings enabled, supply -Dall.warnings=1 on command line ***</echo>
        <echo>*** If all.warnings property is supplied, compile-sources-all-warnings target will be executed ***</echo>
        <echo>*** Else, compile-sources (which only warns about deprecations) target will be executed ***</echo>
    </target>
    
    <target name="compile" depends="init,codegen" description="Compile all artifacts">
        <mkdir dir="${build.classes}" />
        <echo>*** Building Main Sources ***</echo>
        <antcall target="warn-about-warnings" />
                
        <antcall target="compile-sources" > 
            <param name="sources" value="${src.dir}" />
            <param name="dist" value="${build.classes}" />
            <param name="cp" value="classpath" />
        </antcall>
    
        <antcall target="compile-sources-all-warnings"> 
            <param name="sources" value="${src.dir}" />
            <param name="dist" value="${build.classes}" />
            <param name="cp" value="classpath" />
        </antcall>

    </target>
    

    <target name="compile-tests" depends="init">
        <mkdir dir="${test.build.classes}" />

        <echo>*** Building Test Sources ***</echo>
        <antcall target="warn-about-warnings" />
        
        <antcall target="compile-sources" > 
            <param name="sources" value="${test.src.dir}" />
            <param name="dist" value="${test.build.classes}" />
            <param name="cp" value="classpath" />
        </antcall>

        <antcall target="compile-sources-all-warnings">
            <param name="sources" value="${test.src.dir}" />
            <param name="dist" value="${test.build.classes}" />
            <param name="cp" value="classpath" />
        </antcall>

    </target>

    <target name="compile-test" depends="compile-tests" /> <!-- dummy target to catch singular which was old standard-->

    <!-- This target is for default compilation -->
    <target name="compile-sources" unless="all.warnings">
        <path id="final.cp">
            <path refid="${cp}" />
            <fileset file="${pig.jar.dir}/${pig.jarfile}"/>
            <fileset file="${hadoop.jar.dir}/${hadoop.jarfile}"/>
        </path>
        <javac encoding="${build.encoding}" srcdir="${sources}"
                includes="**/*.java" destdir="${dist}" debug="${javac.debug}"
                optimize="${javac.optimize}" target="${javac.version}"
                source="${javac.version}" deprecation="${javac.deprecation}">
            <compilerarg line="${javac.args} ${javac.args.warnings}"/>
            <classpath refid="final.cp"/>
        </javac>
    </target>
        
    <!-- this target is for compilation with all warnings enabled -->
    <target name="compile-sources-all-warnings" if="all.warnings">
        <path id="final.cp">
            <path refid="${cp}" />
            <fileset file="${pig.jar.dir}/${pig.jarfile}"/>
            <fileset file="${hadoop.jar.dir}/${hadoop.jarfile}"/>
        </path>
        <javac encoding="${build.encoding}" srcdir="${sources}"
                includes="**/*.java" destdir="${dist}" debug="${javac.debug}"
                optimize="${javac.optimize}" target="${javac.version}"
                source="${javac.version}" deprecation="${javac.deprecation}">
            <compilerarg line="${javac.args} ${javac.args.all.warnings} "/>
            <classpath refid="final.cp"/>
        </javac>
    </target>

    <!-- ================================================================== -->
    <!-- Documentation                                                      -->
    <!-- ================================================================== -->
    <target name="javadoc" depends="jar" description="Create documentation">
        <mkdir dir="${build.javadoc}" />
        <javadoc overview="${src.docs.dir}/overview.html" packagenames="org.apache.hadoop.owl.*" destdir="${build.javadoc}" author="true" version="true" use="true" windowtitle="${Name} ${version} API" doctitle="${Name} ${version} API" bottom="Copyright &amp;copy; ${year} The Apache Software Foundation">
            <packageset dir="${src.dir}" />
            <link href="${javadoc.link.java}" />
            <classpath>
                <path refid="classpath" />
                <pathelement path="${java.class.path}" />
                <fileset file="${pig.jar.dir}/${pig.jarfile}"/>
                <fileset file="${hadoop.jar.dir}/${hadoop.jarfile}"/>
            </classpath>
            <group title="owl" packages="org.apache.*" />
        </javadoc>
    </target>

    <!-- ================================================================== -->
    <!-- @depricated, Documentation                                         -->
    <!-- ================================================================== -->
    <target name="docs" depends="javadoc" description="Generate javadoc.">
        <mkdir dir="${docs.dir}/build/site" />
        <copy todir="${build.docs}">
              <fileset dir="${docs.dir}/build/site/" />
        </copy>
    </target>

    <target name="source-jar">
        <jar duplicate="preserve" jarfile="${output.jarfile.sources}" basedir="${src.dir}">
            <manifest>
                <section name="org/apache/hadoop/owl">
                    <attribute name="Implementation-Vendor" value="Apache" />
                    <attribute name="Implementation-Title" value="Owl" />
                    <attribute name="Implementation-Version" value="${version}" />
                </section>
            </manifest>
        </jar>
    </target>

    <target name="copy.metadata">
        <copy todir="${build.classes}">
            <fileset dir="${src.dir}" includes="**/*.xml"/>
            <fileset dir="${src.dir}" includes="**/*.properties"/>
        </copy>
    </target>

    <target name="enhance" depends="compile,copy.metadata">

        <!-- the classpath to enhance -->
        <path id="enhancer.classpath">
            <pathelement location="${build.classes}"/> 
            <fileset file="${ivy.lib.dir}/datanucleus-enhancer-*.jar" />
            <path refid="classpath"/>
            <fileset file="${pig.jar.dir}/${pig.jarfile}"/>
            <fileset file="${hadoop.jar.dir}/${hadoop.jarfile}"/>
        </path>

        <!-- define the task enhancer -->
        <taskdef name="enhancer" classname="org.datanucleus.enhancer.tools.EnhancerTask">
            <classpath refid="enhancer.classpath"/>
        </taskdef>

        <!-- enhance -->
        <enhancer classpathref="enhancer.classpath" dir="${build.classes}" verbose="false" api="JPA" persistenceUnit="Owl">
        </enhancer>


    </target>
    
    <!-- ================================================================== -->
    <!-- Make owl.jar                                                       -->
    <!-- ================================================================== -->
    <!-- TODO we should also exculte test here...                           -->
    <!-- ================================================================== -->
    
    <target name="jar" depends="enhance" description="Create owl jar">
        <antcall target="jarWithSvn"/> 
        <antcall target="jarWithOutSvn"/> 
    </target>
        
    <target name="jarWithSvn" if="svn.revision">
        <antcall target="buildJar"> 
            <param name="svnString" value="${svn.revision}" />
        </antcall>
    </target>
    
    <target name="jarWithOutSvn" unless="svn.revision">
        <antcall target="buildJar"> 
            <param name="svnString" value=": unknown" />
        </antcall>
    </target>

    <target name="buildJar">
        <echo>svnString ${svnString}</echo>

        <!-- Build a fat Owl client jar having all the dependencies, the owl jar -->
        <jar jarfile="${output.jarfile}" basedir="${build.classes}">
            <manifest>
                <attribute name="Main-Class" value="org.apache.hadoop.owl.client.CommandLineOwl"/>
                <section name="org/apache/hadoop/owl">
                    <attribute name="Implementation-Vendor" value="Apache" />
                    <attribute name="Implementation-Title" value="Owl" />
                    <attribute name="Implementation-Version" value="${version}" />
                    <attribute name="Build-TimeStamp" value="${timestamp}" />
                    <attribute name="Svn-Revision" value="${svnString}" />
                </section>
            </manifest>

            <!-- Same list as client.jars -->
            <zipgroupfileset dir="${ivy.lib.dir}">
                <include name="commons-beanutils-*.jar"/>
                <include name="commons-cli-*.jar"/>
                <include name="commons-beanutils-bean-collections-*.jar"/>
                <include name="commons-collections-*.jar"/>
                <include name="commons-lang-*.jar"/>
                <include name="commons-beanutils-core-*.jar"/>
                <include name="commons-configuration-*.jar"/>
                <include name="ezmorph-*.jar"/>
                <include name="jsr311-*.jar"/>
                <include name="commons-logging-*.jar"/>
                <include name="json-*.jar"/>
                <include name="jersey-*.jar"/>
            </zipgroupfileset>
            <zipgroupfileset dir="${lib.dir}">
                <include name="log4j-*.jar"/>
                <!-- include name="zebra-*.jar"/ -->
            </zipgroupfileset>

            <include name="**/client/*.class"/>
            <include name="**/driver/*.class"/>
            <include name="**/mapreduce/*.class"/>
            <include name="**/common/*.class"/>
            <include name="**/protocol/*.class"/>
        </jar>

        <!-- Build a thin Owl client jar without the dependencies, the owl-core jar -->
        <jar jarfile="${output.jarfile.core}" basedir="${build.classes}">
            <manifest>
                <attribute name="Main-Class" value="org.apache.hadoop.owl.client.CommandLineOwl"/>
                <section name="org/apache/hadoop/owl">
                    <attribute name="Implementation-Vendor" value="Apache" />
                    <attribute name="Implementation-Title" value="Owl" />
                    <attribute name="Implementation-Version" value="${version}" />
                    <attribute name="Build-TimeStamp" value="${timestamp}" />
                    <attribute name="Svn-Revision" value="${svnString}" />
                </section>
            </manifest>

            <include name="**/client/*.class"/>
            <include name="**/driver/*.class"/>
            <include name="**/mapreduce/*.class"/>
            <include name="**/common/*.class"/>
            <include name="**/protocol/*.class"/>
        </jar>

        <!-- Build a Owl interface jar for compiling Owl storage drivers, the owl-driver jar -->
        <jar jarfile="${output.jarfile.driver}" basedir="${build.classes}">
            <manifest>
                <section name="org/apache/hadoop/owl">
                    <attribute name="Implementation-Vendor" value="Apache" />
                    <attribute name="Implementation-Title" value="Owl" />
                    <attribute name="Implementation-Version" value="${version}" />
                    <attribute name="Build-TimeStamp" value="${timestamp}" />
                    <attribute name="Svn-Revision" value="${svnString}" />
                </section>
            </manifest>

            <!-- Just the classes needed for compiling an Owl storage driver -->
            <include name="**/mapreduce/OwlInputStorageDriver.class"/>
            <include name="**/mapreduce/*OwlOperation.class"/>
            <include name="**/protocol/OwlLoaderInfo.class"/>
            <include name="**/protocol/OwlSchema.class"/>
            <include name="**/protocol/OwlColumnSchema.class"/>
            <include name="**/protocol/ColumnType.class"/>
        </jar>
    </target>

    <target name="build-test-jar" depends="compile-tests">
        <echo>svnString ${svnString}</echo>
        <jar jarfile="${output.jarfile.test}" basedir="${test.build.classes}">
            <manifest>
                <attribute name="Main-Class" value="org.apache.hadoop.owl.client.ScriptTests" />
                <section name="org/apache/hadoop/owl">
                    <attribute name="Implementation-Vendor" value="Apache" />
                    <attribute name="Implementation-Title" value="Owl" />
                    <attribute name="Implementation-Version" value="${version}" />
                    <attribute name="Build-TimeStamp" value="${timestamp}" />
                    <attribute name="Svn-Revision" value="${svnString}" />
                </section>
            </manifest>
        </jar>
    </target>


    
    <target name="copy-orm-xml" description="Copy in appropriate db-specific orm.xml">
        <echo>Copying orm.xml for db.type=${db.type}</echo>
        <copy file="${owldb.dir}/${db.type}/orm.xml" tofile="${orm.dir}/orm.xml"/>
    </target>
    
    <target name="war" depends="copy-orm-xml,jar" description="Create owl war">
        <war destfile="${output.warfile}" webxml="web/owl.xml">
          <fileset dir="web">
            <exclude name="owl.xml"/>
          </fileset>
          <lib dir="${ivy.lib.dir}">
            <exclude name="junit-*.jar"/>
            <exclude name="mockito-all-*.jar"/>
          </lib>
          <lib dir="java/lib">
            <exclude name="junit-4.1.jar"/>
            <exclude name="mockito-all-1.8.2.jar" />
            <exclude name="jetty-runner-7.0.0.pre5.jar"/>
            <exclude name="${pig.static.jarfile}" />
            <exclude name="${hadoop.static.jarfile}" />
          </lib>
          <lib dir="${clover.home}/lib">
            <include name="clover.jar"/>
          </lib>
          <classes dir="${build.classes}" excludes="**/client/*.class,**/driver/*.class,**/mapreduce/*.class"/>
        </war>
     <svnversion outputproperty="svn.revision"/>
    </target>

    <!-- ================================================================== -->
    <!-- Run unit tests                                                     -->
    <!-- ================================================================== -->

    <!-- Force order such that backend/logical layer tests run first followed by client tests. This is required when
    runing with jetty and derby since only one open connection to derby is allowed 
    (db connection is made currently on first request, not on jetty start) -->
    <target name="run-tests" depends="compile-tests">
        <sequential>
            <antcall target="run-backend-tests"/>
            <antcall target="run-client-tests" />
        </sequential>
        <fail if="tests.failed">Tests failed!</fail>
    </target>

    <target name="run-backend-tests">
        <delete dir="${test.log.dir}"/>
        <mkdir dir="${test.log.dir}"/>
        <mkdir dir="${basedir}/test"/>
        <junit showoutput="${test.output}" printsummary="yes" haltonfailure="no" fork="yes" maxmemory="256m" dir="${basedir}" timeout="${test.timeout}" errorProperty="tests.failed" failureProperty="tests.failed">
            <sysproperty key="org.apache.hadoop.owl.xmlconfig" value="${test.xmlconfig}"/>
            <sysproperty key="org.apache.hadoop.owl.test.uri" value="${test.uri}"/>
            <classpath>
                <path refid="backend.test.classpath"/>
                <fileset file="${pig.jar.dir}/${pig.jarfile}"/>
                <fileset file="${hadoop.jar.dir}/${hadoop.jarfile}"/>
            </classpath>

            <formatter type="${test.junit.output.format}" />

            <batchtest fork="yes" todir="${test.log.dir}" unless="testcase">
                <fileset dir="java/test">
                    <include name="**/backend/*Test*.java" />
                    <include name="**/logical/*Test*.java" />
                    <include name="**/parser/*Test*.java" />
                </fileset>
            </batchtest>
            <batchtest fork="yes" todir="${test.log.dir}" if="testcase">
                <fileset dir="java/test" includes="**/${testcase}.java"/>
            </batchtest>
        </junit>
        <fail if="tests.failed">Tests failed!</fail>
    </target>

    <target name="run-client-tests">
        <delete dir="${test.log.dir}"/>
        <mkdir dir="${test.log.dir}"/>
        <mkdir dir="${basedir}/test"/>
        <junit showoutput="${test.output}" printsummary="yes" haltonfailure="no" fork="yes" maxmemory="256m" dir="${basedir}" timeout="${test.timeout}" errorProperty="tests.failed" failureProperty="tests.failed">
            <sysproperty key="org.apache.hadoop.owl.xmlconfig" value="${test.xmlconfig}"/>
            <sysproperty key="org.apache.hadoop.owl.test.uri" value="${test.uri}"/>
            <classpath>
                <path refid="client.test.classpath" />
                <fileset file="${pig.jar.dir}/${pig.jarfile}"/>
                <fileset file="${hadoop.jar.dir}/${hadoop.jarfile}"/>
            </classpath>
            <formatter type="${test.junit.output.format}" />

            <batchtest fork="yes" todir="${test.log.dir}" unless="testcase">
                <fileset dir="java/test">
                    <include name="**/*Test*.java" />
                    <exclude name="**/backend/**" />
                    <exclude name="**/logical/**" />
                    <exclude name="**/parser/**" />
                    <!-- temporary comment out of these tests till we can move these completely to script tests -->
                    <exclude name="**/client/MultiplePartitionTest.java" />
                    <exclude name="**/client/MultiplePartitionIntervalTest.java" />

                </fileset>
            </batchtest>
        </junit>
        <fail if="tests.failed">Tests failed!</fail>
    </target>



    <target name="test" depends="war, jetty-stop, derby-cleanup, derby-setup" >
        <sequential>
            <antcall target="jetty-start" />
            <antcall target="run-tests"/>
            <antcall target="jetty-stop"/> 
        </sequential>
        <fail if="tests.failed">Tests failed!</fail>
    </target>

    <target name="test-with-no-jetty">
        <sequential>
            <antcall target="owlclean" />
            <antcall target="war" />
            <antcall target="derby-setup" />
            <antcall target="run-tests"/>
        </sequential>
        <fail if="tests.failed">Tests failed!</fail>
    </target>

    <target name="test-with-no-cleanup">
        <sequential>
            <antcall target="jetty-start" />
            <antcall target="run-tests"/>
            <antcall target="jetty-stop"/> 
        </sequential>
        <fail if="tests.failed">Tests failed!</fail>
    </target>

    
    <!-- ================================================================== -->
    <!-- D I S T R I B U T I O N                                            -->
    <!-- ================================================================== -->
    <target name="package" depends="jar, javadoc" description="Create a Owl release">
        <mkdir dir="${dist.dir}" />
        <mkdir dir="${dist.dir}/lib" />
        <mkdir dir="${dist.dir}/scripts" />
        <mkdir dir="${dist.dir}/docs" />
        <mkdir dir="${dist.dir}/docs/api" />

        <copy todir="${dist.dir}/lib" includeEmptyDirs="false">
            <fileset dir="${lib.dir}">
            </fileset>
        </copy>

        <copy file="${output.jarfile.core}" todir="${dist.dir}" />

        <copy todir="${dist.dir}/bin">
            <fileset dir="bin" />
        </copy>

        <copy todir="${dist.dir}/docs">
            <fileset dir="${build.docs}" />
        </copy>

        <copy todir="${dist.dir}/src" includeEmptyDirs="true">
            <fileset dir="${src.dir}" />
        </copy>

        <copy todir="${dist.dir}/" file="build.xml" />

        <copy todir="${dist.dir}">
            <fileset dir=".">
                <include name="*.txt" />
            </fileset>
        </copy>

        <chmod perm="ugo+x" type="file">
            <fileset dir="${dist.dir}/bin" />
        </chmod>

    </target>

    <!-- ================================================================== -->
    <!-- Make release tarball                                               -->
    <!-- ================================================================== -->
    <target name="tar" depends="package" description="Create release tarball">
        <tar compression="gzip" longfile="gnu" destfile="${build.dir}/${final.name}.tar.gz">
            <tarfileset dir="${build.dir}" mode="664">
                <exclude name="${final.name}/bin/*" />
                <include name="${final.name}/**" />
            </tarfileset>
            <tarfileset dir="${build.dir}" mode="755">
                <include name="${final.name}/bin/*" />
            </tarfileset>
        </tar>
    </target>
   
    <!-- ================================================================== -->
    <!-- Findbugs                                                           -->
    <!-- ================================================================== -->

    <target name="findbugs" depends="check-for-findbugs, jar" if="findbugs.present" description="Run findbugs if present">
        <property name="findbugs.out.dir" value="${test.build.dir}/findbugs"/>
        <property name="findbugs.report.htmlfile" value="${findbugs.out.dir}/owl-findbugs-report.html"/>
        <property name="findbugs.report.xmlfile" value="${findbugs.out.dir}/owl-findbugs-report.xml"/>
        <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
                classpath="${findbugs.home}/lib/findbugs-ant.jar" />
        <mkdir dir="${findbugs.out.dir}"/>
        <findbugs home="${findbugs.home}" output="xml:withMessages"
            outputFile="${findbugs.report.xmlfile}" effort="max" jvmargs="-Xmx512M"
            excludeFilter="${basedir}/ci/findbugs_filter.xml">
              <auxClasspath>
                <fileset dir="${lib.dir}">
                      <include name="**/*.jar"/>
                </fileset>
              </auxClasspath>
              <sourcePath path="${src.dir}"/>
              <class location="${output.jarfile.core}" />
        </findbugs>
        <xslt style="${findbugs.home}/src/xsl/default.xsl" in="${findbugs.report.xmlfile}"
                out="${findbugs.report.htmlfile}"/>
    </target>
    
    <target name="check-for-findbugs">
        <available property="findbugs.present" file="${findbugs.home}/lib/findbugs.jar" />
    </target>

  <!-- ================================================================== -->
  <!-- clover                                                             -->
  <!-- ================================================================== -->

  <target name="clover" depends="clover.setup, clover.info" description="Instrument the Unit tests using Clover.  
       To use, specify -Dclover.home=&lt;base of clover installation&gt; -Drun.clover=true on the command line."/>

  <target name="clover.setup" if="clover.enabled">
    <taskdef resource="cloverlib.xml" classpath="${clover.jar}:${classpath}:${hadoop.jar.dir}/${hadoop.jarfile}:${pig.jar.dir}/${pig.jarfile}"/>
     <mkdir dir="${clover.db.dir}"/>
     <clover-setup initString="${clover.db.dir}/owl_coverage.db">
        <fileset dir="${src.dir}" includes="**/*.java"/>
     </clover-setup>
  </target>

  <target name="clover.info" unless="clover.present">
        <echo>
        Clover not found. Code coverage reports disabled.
        </echo>
  </target>

  <target name="clover.check">
    <fail unless="clover.present">
      ##################################################################
        Clover not found.
        Please specify -Dclover.home=&lt;base of clover installation&gt;
        on the command line.
      ##################################################################
      </fail>
  </target>

  <target name="generate-clover-reports" depends="clover.check, clover">
     <mkdir dir="${clover.report.dir}"/>
     <clover-report>
          <current outfile="${clover.report.dir}" title="${final.name}">
              <format type="html"/>
        </current>
    </clover-report>
    <clover-report>
        <current outfile="${clover.report.dir}/clover.xml" title="${final.name}">
            <format type="xml"/>
        </current>
    </clover-report>
  </target>

    <!-- ================================================================== -->
    <!-- Perform audit activities for the release                           -->
    <!-- ================================================================== -->
    <target name="get-rats" description="Downloads the release audit tool">
        <get src="${rats_url}" dest="${lib.dir}/rats.jar" usetimestamp="false" />
    </target>
   
    <target name="releaseaudit" depends="get-rats ,package" description="Release Audit activities">
        <java classname="${rat.reporting.classname}" fork="true" classpath="${lib.dir}/rats.jar">
              <arg value="${build.dir}/${final.name}"/>
        </java>
    </target>

    <!--
    <target name="checkstyle" depends="checkstyle.check, set-checkstyle-classpath" if="checkstyle.home" 
            description="Run optional third-party tool targets">
        <taskdef resource="checkstyletask.properties">
               <classpath refid="classpath"/>
            <classpath refid="checkstyle-classpath"/>
        </taskdef>
        <mkdir dir="${test.build.dir}"/>
        <checkstyle config="${test.src.dir}/checkstyle.xml" failOnViolation="false">
            <fileset dir="${src.dir}" includes="**/*.java" excludes="**/generated/**"/>
            <formatter type="xml" toFile="${test.build.dir}/checkstyle-errors.xml"/>
        </checkstyle>
        <xslt style="${test.src.dir}/checkstyle-noframes-sorted.xsl" in="${test.build.dir}/checkstyle-errors.xml"
            out="${test.build.dir}/checkstyle-errors.html"/>
    </target>
    -->

    <target name="checkstyle">
        <echo message="Dummy checkstyle target, style not actually checked." />
    </target>

    <target name="checkstyle.check" unless="checkstyle.home">
        <fail message="'checkstyle.home' is not defined. Please pass -Dcheckstyle.home=&lt;base of checkstyle installation&gt; 
        to Ant on the command-line." />
    </target>
    
    <target name="set-checkstyle-classpath">
        <path id="checkstyle-classpath">
            <fileset dir="${checkstyle.home}">
            <include name="**/*.jar"/>
             </fileset>
     </path>
    </target>

    <!-- ================================================================== -->
    <!-- Ant targets for kicking off jetty as part of the build             -->
    <!-- ================================================================== -->

    <target name="jetty-start" unless="jetty.disabled">
        <exec executable="${ci.dir}/jetty_start.sh">
            <arg line="${output.warfile} /owl ci/ ${test.serverport}"/>
        </exec>
    </target>
        
    <target name="jetty-stop">
        <exec executable="${ci.dir}/jetty_stop.sh">
            <arg line="${output.warfile} /owl ci/"/>
        </exec>
    </target>
        
    <target name="jetty-check-status">
        <exec executable="${ci.dir}/jetty_check.sh">
            <arg line="${output.warfile} /owl ci/"/>
        </exec>
    </target>
    
    <!-- ================================================================== -->
    <!-- Ant targets for executing db schema in derby as part of the build  -->
    <!-- ================================================================== -->

    <target name="derby-setup" if="derby.enabled">
        <exec executable="${ci.dir}/derby_initialize_schema.sh">
            <arg line='${ci.dir}'/>
        </exec>
    </target>

    <target name="derby-cleanup">
        <exec executable="${ci.dir}/derby_cleanup.sh">
        </exec>
    </target>
    <!-- ==== -->    
    <!-- javacc target="${parser.dir}/Owl.jj" javacchome="${JAVACC_HOME}" unicodeinput="true"/ -->
    <target name="codegen" depends="init" description="Runs JavaCC code generation.">
    <delete>
        <fileset dir="${parser.dir}">
            <include name="*.java" />
            </fileset>
        <fileset dir="${schema.dir}" includes="*.java" excludes="ColumnType.java, Schema.java" />
    </delete>
        <move file="${ivy.lib.dir}/javacc-4.2.jar" tofile="${javacc.home}/javacc.jar"/>
    <javacc target="${parser.dir}/Owl.jj"
        javacchome="${JAVACC_HOME}"
        debugparser="true" />
    <javacc target="${schema.dir}/SchemaParser.jjt"
        javacchome="${JAVACC_HOME}"
        debugparser="true" />
   </target>

    <!-- Ivy -->

    <target name="ivy-init-dirs">
        <mkdir dir="${build.ivy.dir}"/>
        <mkdir dir="${build.ivy.lib.dir}"/>
        <mkdir dir="${build.ivy.report.dir}"/>
        <mkdir dir="${build.ivy.maven.dir}"/>
    </target>

    <target name="ivy-probe-antlib">
        <condition property="ivy.found">
            <typefound uri="antlib:org.apache.ivy.ant" name="cleancache"/>
        </condition>
    </target>

    <target name="ivy-download" description="To download ivy" unless="offline">
        <get src="${ivy_repo_url}" dest="${ivy.jar}" usetimestamp="true"/>
    </target>

    <!--
     To avoid Ivy leaking things across big projects, always load Ivy in the same classloader.
     Also note how we skip loading Ivy if it is already there, just to make sure all is well.
     -->
    <target name="ivy-init-antlib" depends="ivy-download,ivy-init-dirs,ivy-probe-antlib" unless="ivy.found">
        <typedef uri="antlib:org.apache.ivy.ant" onerror="fail" loaderRef="ivyLoader">
            <classpath>
                <pathelement location="${ivy.jar}"/>
            </classpath>
        </typedef>
        <fail>
            <condition>
                <not>
                    <typefound uri="antlib:org.apache.ivy.ant" name="cleancache"/>
                </not>
            </condition>
            You need Apache Ivy 2.0 or later from http://ant.apache.org/
            It could not be loaded from ${ivy_repo_url}
        </fail>
    </target>

    <target name="ivy-init" depends="ivy-init-antlib">
        <!--Configure Ivy by reading in the settings file
           If anyone has already read in a settings file into this settings ID, it gets priority
        -->
        <ivy:configure settingsid="${ant.project.name}.ivy.settings" file="${ivysettings.xml}" override='false'/>
    </target>

    <target name="ivy-compile" depends="ivy-init"
            description="Resolve, Retrieve Ivy-managed artifacts for compile configuration">
        <ivy:resolve settingsRef="${ant.project.name}.ivy.settings" conf="compile"/>
        <ivy:retrieve settingsRef="${ant.project.name}.ivy.settings"
                      pattern="${build.ivy.lib.dir}/${ivy.artifact.retrieve.pattern}" conf="compile"/>
        <ivy:cachepath pathid="compile.classpath" conf="compile"/>
    </target>

    <target name="convertPomToIvy" depends="ivy-init">
        <ivy:convertpom pomFile="./mavenize/pom.xml" ivyFile="./mavenize/ivy.xml" />
    </target>

    <target name="ivy-test" depends="ivy-init" description="Resolve, Retrieve Ivy-managed artifacts for test configuration">
       <ivy:resolve settingsRef="${ant.project.name}.ivy.settings" conf="test"/>
       <ivy:retrieve settingsRef="${ant.project.name}.ivy.settings"
                 pattern="${build.ivy.lib.dir}/${ivy.artifact.retrieve.pattern}" conf="test"/>
       <ivy:cachepath pathid="test-classpath" conf="test"/>
     </target>
</project>
