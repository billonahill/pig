/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Generated By:JavaCC: Do not edit this line. TableStorageParser.java */
package org.apache.hadoop.zebra.types;
import java.io.*;
import java.util.*;

public class TableStorageParser implements TableStorageParserConstants {
           public static void main( String[] args )
           throws ParseException, TokenMgrError, java.io.FileNotFoundException, java.io.IOException, java.lang.ClassNotFoundException {
                                        /*
					FileInputStream input = new FileInputStream("/tmp/schema");
					ObjectInputStream objin = new ObjectInputStream(input);
					Schema schema = (Schema) objin.readObject();
					objin.close();
					input = new FileInputStream("store");
					System.out.println("Table Schema:");
					System.out.println("--------------------------");
					System.out.println(schema.toString());
					Partition partition = new Partition(
               TableStorageParser parser = new TableStorageParser(schema.toString(), schema) ;
					ArrayList<CGSchema> schemas = parser.StorageSchema();
					System.out.println("Column Groups:");
					System.out.println("--------------------------");
					for (int i = 0; i < schemas.size(); i++)
					{
						System.out.println(schemas.get(i).toString());
						System.out.println("==========================");
					}
					System.out.println("Table Schema with Storage Hints");
					System.out.println(schema.toString());
					System.out.println("==========================");
					System.out.println("Column Map:");
					System.out.println("--------------------------");
					Map<String, Schema.ColumnMappingEntry> colmap = schema.getColMap();
					if (!colmap.isEmpty())
					{
						Set<Map.Entry<String, Schema.ColumnMappingEntry>> entrySet = colmap.entrySet();
						Map.Entry<String, Schema.ColumnMappingEntry>[] array = entrySet.toArray(new Map.Entry[entrySet.size()]);
						for (int j = 0; j < colmap.size(); j++)
						{
							System.out.println("[Column = " + array[j].getKey() +" CG= "+ array[j].getValue().getCGIndex()+"."+array[j].getValue().getColumnIndex()+"]");
						}
					}
					Schema.ColumnMappingEntry cm;
					if (args.length > 0)
					{
						System.out.println("==========================");
						System.out.println("Column CG Index:");
						System.out.println("--------------------------");
						if ((cm = schema.getColMapping(args[0])) != null)
							System.out.println(args[0]+":CG= "+ cm.getCGIndex()+"."+cm.getColumnIndex());
						else
							System.out.println(args[0]+":Column not found !");
					}
					Schema.ColumnSchema fs;
					if (args.length > 0)
					{
						System.out.println("==========================");
						System.out.println("Column Schema:");
						System.out.println("--------------------------");
						StringBuilder sb = new StringBuilder();
						if ((fs = schema.getColumnSchema(args[0])) != null)
						{
						// print out a particular  column's CG index
						//	System.out.println(args[0]+":Schema = "+ fs.name +":"+ColumnType.genTypeToNameMap().get(fs.type));
							Schema.stringifySchema(sb, fs.schema, fs.type, false, false);
							if (sb.toString().isEmpty())
								System.out.println(args[0]+":Schema = "+ ColumnType.findTypeName(fs.type));
							else
								System.out.println(args[0]+":Schema = "+ ColumnType.findTypeName(fs.type)+":"+sb.toString());
						} else
							System.out.println(args[0]+":Column not found !");
					}
					*/
      }
                public TableStorageParser(java.io.Reader in, Partition partition, Schema schema) { this(in); mSchema = schema; this.partition = partition;}
                private Schema mSchema;
                private int mDefaultCGIndex = -1;
                private String mCompressor = "lzo2", mSerializer = "pig";
                private int mCGCount = 0;
                private Partition partition;

  final public ArrayList<CGSchema> StorageSchema() throws ParseException, ParseException {
        ArrayList<CGSchema> s = new ArrayList();
        CGSchema fs;
        CGSchema defaultSchema;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
        jj_consume_token(0);
                        defaultSchema = partition.generateDefaultCGSchema(mCompressor, mSerializer, 0);
                        if (defaultSchema != null)
                                s.add(defaultSchema);
                        {if (true) return s;}
        break;
      case COMPRESS:
      case SERIALIZE:
      case 18:
        fs = FieldSchema();
                                    mCGCount++; if (fs != null) s.add(fs);
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 17:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          jj_consume_token(17);
          fs = FieldSchema();
                                         mCGCount++; if (fs != null) s.add(fs);
        }
        jj_consume_token(0);
                        defaultSchema = partition.generateDefaultCGSchema(mCompressor, mSerializer, mDefaultCGIndex == -1 ? mDefaultCGIndex = mCGCount++ : mDefaultCGIndex);
                        if (defaultSchema != null)
                                s.add(defaultSchema);
                        {if (true) return s;}
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (TokenMgrError e) {
                {if (true) throw new ParseException(e.getMessage());}
    }
    throw new Error("Missing return statement in function");
  }

  final public CGSchema FieldSchema() throws ParseException {
        Token t1 = null, t2 = null;
        Schema fs = null;
        CGSchema cs = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMPRESS:
      jj_consume_token(COMPRESS);
      t1 = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SERIALIZE:
        jj_consume_token(SERIALIZE);
        t2 = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      break;
    case SERIALIZE:
      jj_consume_token(SERIALIZE);
      t2 = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMPRESS:
        jj_consume_token(COMPRESS);
        t1 = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      if (jj_2_1(100)) {
        jj_consume_token(18);
        fs = RecordSchema(null);
        jj_consume_token(19);
        jj_consume_token(COMPRESS);
        t1 = jj_consume_token(COMPRESSOR);
        jj_consume_token(SERIALIZE);
        t2 = jj_consume_token(SERIALIZER);
      } else if (jj_2_2(100)) {
        jj_consume_token(18);
        fs = RecordSchema(null);
        jj_consume_token(19);
        jj_consume_token(SERIALIZE);
        t2 = jj_consume_token(SERIALIZER);
        jj_consume_token(COMPRESS);
        t1 = jj_consume_token(COMPRESSOR);
      } else if (jj_2_3(100)) {
        jj_consume_token(18);
        fs = RecordSchema(null);
        jj_consume_token(19);
        jj_consume_token(COMPRESS);
        t1 = jj_consume_token(COMPRESSOR);
      } else if (jj_2_4(100)) {
        jj_consume_token(18);
        fs = RecordSchema(null);
        jj_consume_token(19);
        jj_consume_token(SERIALIZE);
        t2 = jj_consume_token(SERIALIZER);
      } else if (jj_2_5(100)) {
        jj_consume_token(18);
        fs = RecordSchema(null);
        jj_consume_token(19);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                String compressor, serializer;
                if (t1 == null)
                        compressor = "lzo2";
                else {
                        compressor = t1.image;
                }
                if (t2 == null)
                        serializer = "pig";
                else {
                        serializer = t2.image;
                }
                if (fs == null)
                {
                        if (mDefaultCGIndex != -1)
                        {
                                String msg = "Default Storage Information defined more than once";
                                {if (true) throw new ParseException(msg);}
                        }
                        mDefaultCGIndex = mCGCount;
                        mCompressor = compressor;
                        mSerializer = serializer;
                } else
                        cs = new CGSchema(fs, false, serializer, compressor);
                {if (true) return cs;}
    throw new Error("Missing return statement in function");
  }

  final public Schema.ColumnSchema ColumnSchema(int colIndex) throws ParseException, ParseException {
        Token t1;
        String name = "";
        Schema.ColumnSchema fs = null;
    if (jj_2_6(2147483647)) {
      fs = SchemaRecord(mSchema, name, colIndex);
    } else if (jj_2_7(2147483647)) {
      fs = SchemaMap(mSchema, name, colIndex);
    } else if (jj_2_8(2147483647)) {
      fs = AtomSchema(mSchema, name, colIndex);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return fs;}
    throw new Error("Missing return statement in function");
  }

  final public Schema.ColumnSchema AtomSchema(Schema schema, String name, int colIndex) throws ParseException, ParseException {
        Token t1 = null;
        Schema.ColumnSchema fs;
    t1 = jj_consume_token(IDENTIFIER);
                        Schema.ColumnSchema fs0 = schema.getColumn(t1.image);
                        name += t1.image;
                        if (fs0 == null)
                        {
                                String msg = "Column "+name+" not defined in schema";
                                {if (true) throw new ParseException(msg);}
                        }
                        /* create a new field schema using concatenated name */
                        if (!partition.getPartitionInfo().setCGIndex(fs0, mCGCount, colIndex, name))
                        {
                                {if (true) throw new ParseException("Column "+name+" specified more than once!");}
                        }
                        fs = new Schema.ColumnSchema(name, fs0.schema, fs0.type);
                        {if (true) return fs;}
    throw new Error("Missing return statement in function");
  }

  final public Schema.ColumnSchema SchemaMap(Schema schema, String name, int colIndex) throws ParseException, ParseException {
        Token t1 = null;
        Schema.ColumnSchema fs;
    t1 = jj_consume_token(IDENTIFIER);
    jj_consume_token(20);
    fs = AnonymousMapSchema(schema.getColumn(t1.image), t1.image, 0, colIndex);
                {if (true) return fs;}
    throw new Error("Missing return statement in function");
  }

  final public Schema.ColumnSchema SchemaRecord(Schema schema, String name, int colIndex) throws ParseException, ParseException {
        Token t1 = null;
        Schema.ColumnSchema fs;
    t1 = jj_consume_token(IDENTIFIER);
    jj_consume_token(21);
    fs = AnonymousRecordSchema(schema.getColumn(t1.image), t1.image, 0, colIndex);
                {if (true) return fs;}
    throw new Error("Missing return statement in function");
  }

  final public Schema.ColumnSchema AnonymousColumnSchema(Schema.ColumnSchema schema, String name, int cl, int colIndex) throws ParseException, ParseException {
        Token t1;
        Schema.ColumnSchema fs = null;
    if (jj_2_9(2147483647)) {
      fs = AnonymousSchemaRecord(schema, name, cl, colIndex);
    } else if (jj_2_10(2147483647)) {
      fs = AnonymousSchemaMap(schema, name, cl, colIndex);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return fs;}
    throw new Error("Missing return statement in function");
  }

  final public Schema.ColumnSchema AnonymousSchemaRecord(Schema.ColumnSchema schema, String name, int cl, int colIndex) throws ParseException, ParseException {
        Schema.ColumnSchema fs;
    jj_consume_token(21);
    fs = AnonymousRecordSchema(schema, name, cl, colIndex);
                {if (true) return fs;}
    throw new Error("Missing return statement in function");
  }

  final public Schema.ColumnSchema AnonymousSchemaMap(Schema.ColumnSchema schema, String name, int cl, int colIndex) throws ParseException, ParseException {
        Schema.ColumnSchema fs;
    jj_consume_token(20);
    fs = AnonymousMapSchema(schema, name, cl, colIndex);
                {if (true) return fs;}
    throw new Error("Missing return statement in function");
  }

  final public Schema RecordSchema(Schema list) throws ParseException, ParseException {
        if (list == null)
                list = new Schema();
        Schema.ColumnSchema fs = null;
        int colIndex = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      fs = ColumnSchema(colIndex);
                                             list.add(fs);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 22:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_2;
        }
        jj_consume_token(22);
        fs = ColumnSchema(++colIndex);
                                                     list.add(fs);
      }
      break;
    default:
      jj_la1[6] = jj_gen;

                    list = null;
    }
          {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public Schema.ColumnSchema AnonymousRecordSchema(Schema.ColumnSchema schema, String name, int cl, int colIndex) throws ParseException, ParseException {
        Schema.ColumnSchema fs = null, fs0 = null;
        Token t;
        if (schema == null)
        {
                String msg = "no matching column: " + name;
                throw new ParseException(msg);
        } else if (schema.type != ColumnType.RECORD && schema.type != ColumnType.COLLECTION) {
                String msg = "Column " + name + " is not a record or a collection of records";
                throw new ParseException(msg);
        } else if (schema.type == ColumnType.COLLECTION) {
                String msg = "Split of COLLECTION Column, " + name + ", is not supported in this release";
                throw new ParseException(msg);
  }
        if (schema.type == ColumnType.COLLECTION)
        {
                cl += 1;
                if (schema.schema.getNumColumns() == 1 && schema.schema.getColumn(0).type == ColumnType.RECORD && (schema.schema.getColumn(0).name == null || schema.schema.getColumn(0).name.isEmpty()))
                // an anonymous record inside a collection: go one level lower
                {
                        schema = schema.schema.getColumn(0);
                        partition.setSplit(schema, Partition.SplitType.RECORD, Partition.SplitType.RECORD, name, null, false);
                }
        }
    if (jj_2_11(2)) {
      t = jj_consume_token(IDENTIFIER);
      fs = AnonymousSchemaRecord(schema.schema.getColumn(t.image), name + "." + t.image, cl, colIndex);
            partition.setSplit(schema, Partition.SplitType.RECORD, Partition.SplitType.RECORD, name, t.image, true);
                        {if (true) return fs;}
    } else if (jj_2_12(2)) {
      t = jj_consume_token(IDENTIFIER);
      fs = AnonymousSchemaMap(schema.schema.getColumn(t.image), name + "." + t.image, cl, colIndex);
            partition.setSplit(schema, Partition.SplitType.RECORD, Partition.SplitType.MAP, name, t.image, true);
                        {if (true) return fs;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
            partition.setSplit(schema, Partition.SplitType.RECORD, Partition.SplitType.NONE, name, t.image, false);
                        name = name + "." + t.image;
                        fs0 = schema.schema.getColumn(t.image);
                        if (fs0 == null)
                        {
                                String msg = "no matching column: " + name;
                                {if (true) throw new ParseException(msg);}
                        }
                        if (!partition.setCGIndex(fs0, mCGCount, colIndex, name))
                                {if (true) throw new ParseException("Column "+name+" specified more than once!");}
                        fs = new Schema.ColumnSchema(name, fs0.schema, fs0.type);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return fs;}
    throw new Error("Missing return statement in function");
  }

  final public Schema.ColumnSchema AnonymousMapSchema(Schema.ColumnSchema schema, String name, int cl, int colIndex) throws ParseException, ParseException {
        Schema.ColumnSchema fs = null;
  HashSet<String> keys;
        if (schema == null)
        {
                String msg = "no matching column: " + name;
                throw new ParseException(msg);
        } else if (schema.type != ColumnType.MAP) {
                String msg = "Column " + name + " is not a map";
                throw new ParseException(msg);
        }
        partition.setSplit(schema, Partition.SplitType.MAP, Partition.SplitType.RECORD, name, null, false);
    jj_consume_token(23);
    keys = hashKeys();
    jj_consume_token(24);
                        if(!partition.getPartitionInfo().setKeyCGIndex(schema, mCGCount, colIndex, name, keys))
                                {if (true) throw new ParseException("Column "+name+" specified more than once!");}
                        fs = new Schema.ColumnSchema(name, schema.schema, schema.type);
          {if (true) return fs;}
    throw new Error("Missing return statement in function");
  }

  final public HashSet<String> hashKeys() throws ParseException {
  Token t;
  HashSet<String> result = new HashSet<String>();
    t = jj_consume_token(IDENTIFIER);
                     result.add(t.image);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      jj_consume_token(25);
      t = jj_consume_token(IDENTIFIER);
                          result.add(t.image);
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_21()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_3R_14()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(21)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(18)) return true;
    if (jj_3R_4()) return true;
    if (jj_scan_token(19)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(18)) return true;
    if (jj_3R_4()) return true;
    if (jj_scan_token(19)) return true;
    if (jj_scan_token(SERIALIZE)) return true;
    if (jj_scan_token(SERIALIZER)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(23)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(24)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(18)) return true;
    if (jj_3R_4()) return true;
    if (jj_scan_token(19)) return true;
    if (jj_scan_token(COMPRESS)) return true;
    if (jj_scan_token(COMPRESSOR)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(18)) return true;
    if (jj_3R_4()) return true;
    if (jj_scan_token(19)) return true;
    if (jj_scan_token(SERIALIZE)) return true;
    if (jj_scan_token(SERIALIZER)) return true;
    if (jj_scan_token(COMPRESS)) return true;
    if (jj_scan_token(COMPRESSOR)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(20)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(18)) return true;
    if (jj_3R_4()) return true;
    if (jj_scan_token(19)) return true;
    if (jj_scan_token(COMPRESS)) return true;
    if (jj_scan_token(COMPRESSOR)) return true;
    if (jj_scan_token(SERIALIZE)) return true;
    if (jj_scan_token(SERIALIZER)) return true;
    return false;
  }

  private boolean jj_3R_6() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(20)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_scan_token(21)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(25)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(22)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    return false;
  }

  /** Generated Token Manager. */
  public TableStorageParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20000,0x40c01,0x800,0x400,0xc00,0x400000,0x10000,0x10000,0x2000000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[12];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public TableStorageParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TableStorageParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TableStorageParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public TableStorageParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TableStorageParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public TableStorageParser(TableStorageParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(TableStorageParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[26];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 26; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 12; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
